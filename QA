我们应该随时基于保持项目整洁性、提高代码质量、api 高效直观、避免职责重叠但是也要避免无限细分、精简无用逻辑避免冗余、提高用户体验等角度来审视代码。
完整分析项目，我发现在项目中一些相似的命名 、包路径、函数定义、功能划分，这些模块有冲突吗？有重复吗？现在系统中生效的是那些？有优化空间吗？
考虑到 autoload 中全局系统的支持。

先列出问题，然后分析代码，然后开始优化，基于保持项目整洁性、api 高效直观、提高代码质量、精简无用逻辑、提高用户体验等角度来审视代码。清理不需要的代码。

请继续重构，我们的目的是只保留最优设计。

回顾一下我们是否达成了目的？然后确认修改是否全面？是否可用？是否足够整洁高效？是否还有遗漏？

继续

分步进行修改。

请保持激进，不要考虑兼容层，因为我们的模块设计是解耦的，不会影响到其他系统。
编码的时候不要跳过一些严重的问题（比如manager 空、config 空），这种异常是不能容忍的，允许 crash 来暴露问题，所以不要添加无谓的空判断
在激进的重构过程中，应该谨慎使用现有组件，除非现有组件符合我们对于最优架构的设计。
如果冲突，请删除旧文件，而不是考虑避开或者兼容。
请开始实现重构。
重构的过程中，可以考虑到 autoload 中全局系统的支持，比如 EventBus 、ResourceManager 、ObjectPool、AudioManager、GameManager、ConfigManager

带着重构优化的目光审视相关代码，以最优解重构模块，不需要考虑兼容问题，如果有保护性的兼容代码请修改掉，不要使用注释相关功能的方式来逃避问题。
提高代码质量：比如封装重复对象，合并重复功能，清理冗余代码，
我们生成代码的时候，提前考虑好性能、可扩展性、可配置、解耦、模块化的实现。代码要提前关注可能与其他系统的交互,预设交互空间（比如难度、皮肤、多语言-目前只需要中文、成就统计、遗物影响、事件影响、插件系统以及其它系统）
新增/删除/重构功能时判断此项目是否真的需要这些需修改？在合适的范围内做减法。
完成模块开发后，在最后再次确认是否有遗漏，确认无误后更新 README.md，以规划下一步的开发工作。

运行 godot 查看错误日志并继续修复，每次修復一个问题之前，请先告诉我问题的根源，以及你修复的方式，修复之前请先思考有没有更好的方式。



https://itch.io/
https://www.spriters-resource.com/
https://github.com/LiberatedPixelCup/Universal-LPC-Spritesheet-Character-Generator
https://pflat.itch.io/lpc-character-generator
https://liberatedpixelcup.github.io/Universal-LPC-Spritesheet-Character-Generator/
https://github.com/xiaomaogame/catctor